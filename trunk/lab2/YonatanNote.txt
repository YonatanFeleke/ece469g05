

dlxos will only have one process at a time.
So process1 $20 -> memory location $FFFC
   process2 $20 -> memory location $FFFA

6 pages to one process 2,2,1,1 code data heap and stack

in Memory.c search for the lastosadrress -> calculate last memory adress
    -> allows to initialize the freemap.

1) allocPage -> called whenever you get a new page. runs freemap-freepage-sets it to one - get page entry
        - writes it into memory.c. return the 
2) page fault handler ->
if you allocate a page at 0x28 and it has a total of say 4k then we check if it has passed it.
pcb->currentSavedFrame->regs->
__________________________________________________________________________________________
Heap work Note
void *malloc(int memsize);              //trap 0x467
int mfree(void *ptr);                   //trap 0x468
System stack area is not added to the Page table translation


******** process can only have 32 pages not our implentation

Current implementation
	- store the size at right below the adress
	- return said address
	- if marked as heap and above the top of the heap 



Concerns
The limit of 32 physical pages per process includes the page allocated for the heap.
After Heap exceeds 4k limit need to allocate more memory
	- pagefaulthandler needs to check if the previous page was a Heap


Implementation
memory_constants.h
Process.c ProcessFork
Memory.c  Translate and all last functions
	
	   